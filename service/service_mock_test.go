// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package service_test is a generated GoMock package.
package service_test

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/serhiihuberniuk/bet-predictor/models"
)

// Mockrepository is a mock of repository interface.
type Mockrepository struct {
	ctrl     *gomock.Controller
	recorder *MockrepositoryMockRecorder
}

// MockrepositoryMockRecorder is the mock recorder for Mockrepository.
type MockrepositoryMockRecorder struct {
	mock *Mockrepository
}

// NewMockrepository creates a new mock instance.
func NewMockrepository(ctrl *gomock.Controller) *Mockrepository {
	mock := &Mockrepository{ctrl: ctrl}
	mock.recorder = &MockrepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockrepository) EXPECT() *MockrepositoryMockRecorder {
	return m.recorder
}

// CreateLeague mocks base method.
func (m *Mockrepository) CreateLeague(ctx context.Context, league *models.League) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLeague", ctx, league)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateLeague indicates an expected call of CreateLeague.
func (mr *MockrepositoryMockRecorder) CreateLeague(ctx, league interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLeague", reflect.TypeOf((*Mockrepository)(nil).CreateLeague), ctx, league)
}

// CreateTeam mocks base method.
func (m *Mockrepository) CreateTeam(ctx context.Context, team *models.Team) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTeam", ctx, team)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTeam indicates an expected call of CreateTeam.
func (mr *MockrepositoryMockRecorder) CreateTeam(ctx, team interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTeam", reflect.TypeOf((*Mockrepository)(nil).CreateTeam), ctx, team)
}

// DeleteLeague mocks base method.
func (m *Mockrepository) DeleteLeague(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLeague", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLeague indicates an expected call of DeleteLeague.
func (mr *MockrepositoryMockRecorder) DeleteLeague(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLeague", reflect.TypeOf((*Mockrepository)(nil).DeleteLeague), ctx, id)
}

// DeleteTeam mocks base method.
func (m *Mockrepository) DeleteTeam(ctx context.Context, teamID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTeam", ctx, teamID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTeam indicates an expected call of DeleteTeam.
func (mr *MockrepositoryMockRecorder) DeleteTeam(ctx, teamID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTeam", reflect.TypeOf((*Mockrepository)(nil).DeleteTeam), ctx, teamID)
}

// GetLeagueByCountryAndName mocks base method.
func (m *Mockrepository) GetLeagueByCountryAndName(ctx context.Context, countrySlug, slug string) (*models.League, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLeagueByCountryAndName", ctx, countrySlug, slug)
	ret0, _ := ret[0].(*models.League)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLeagueByCountryAndName indicates an expected call of GetLeagueByCountryAndName.
func (mr *MockrepositoryMockRecorder) GetLeagueByCountryAndName(ctx, countrySlug, slug interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLeagueByCountryAndName", reflect.TypeOf((*Mockrepository)(nil).GetLeagueByCountryAndName), ctx, countrySlug, slug)
}

// ListLeagues mocks base method.
func (m *Mockrepository) ListLeagues(ctx context.Context) ([]*models.League, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLeagues", ctx)
	ret0, _ := ret[0].([]*models.League)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLeagues indicates an expected call of ListLeagues.
func (mr *MockrepositoryMockRecorder) ListLeagues(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLeagues", reflect.TypeOf((*Mockrepository)(nil).ListLeagues), ctx)
}

// ListTeams mocks base method.
func (m *Mockrepository) ListTeams(ctx context.Context) ([]*models.Team, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTeams", ctx)
	ret0, _ := ret[0].([]*models.Team)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTeams indicates an expected call of ListTeams.
func (mr *MockrepositoryMockRecorder) ListTeams(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTeams", reflect.TypeOf((*Mockrepository)(nil).ListTeams), ctx)
}

// Mockfetcher is a mock of fetcher interface.
type Mockfetcher struct {
	ctrl     *gomock.Controller
	recorder *MockfetcherMockRecorder
}

// MockfetcherMockRecorder is the mock recorder for Mockfetcher.
type MockfetcherMockRecorder struct {
	mock *Mockfetcher
}

// NewMockfetcher creates a new mock instance.
func NewMockfetcher(ctrl *gomock.Controller) *Mockfetcher {
	mock := &Mockfetcher{ctrl: ctrl}
	mock.recorder = &MockfetcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockfetcher) EXPECT() *MockfetcherMockRecorder {
	return m.recorder
}

// AllLeaguesList mocks base method.
func (m *Mockfetcher) AllLeaguesList(ctx context.Context) ([]*models.League, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllLeaguesList", ctx)
	ret0, _ := ret[0].([]*models.League)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllLeaguesList indicates an expected call of AllLeaguesList.
func (mr *MockfetcherMockRecorder) AllLeaguesList(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllLeaguesList", reflect.TypeOf((*Mockfetcher)(nil).AllLeaguesList), ctx)
}

// GetTeamsBySeasonID mocks base method.
func (m *Mockfetcher) GetTeamsBySeasonID(ctx context.Context, seasonID int) ([]*models.Team, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTeamsBySeasonID", ctx, seasonID)
	ret0, _ := ret[0].([]*models.Team)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTeamsBySeasonID indicates an expected call of GetTeamsBySeasonID.
func (mr *MockfetcherMockRecorder) GetTeamsBySeasonID(ctx, seasonID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTeamsBySeasonID", reflect.TypeOf((*Mockfetcher)(nil).GetTeamsBySeasonID), ctx, seasonID)
}
